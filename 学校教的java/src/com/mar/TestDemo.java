package com.mar;

//深入分析变量
public class TestDemo {
    public static void main(String[] args) {


    }
    /**
     * 变量的分类和初始值：
     * 变量因定义的位置不同，分为成员变量，和局部变量
     *
     * 成员变量：
     * 直接在类的花括号中的变量，又称为字段
     * 类成员变量：使用static修饰
     * 实例成员变量，不使用static修饰
     *
     * 局部变量：
     * 指定定义在方法中的变量
     * 方法形式参数
     * 代码块中的变量
     *
     * 区别：
     * 成员变量都是有初始值
     * 局部变量没有初始值
     * 使用局部变量，必须先赋值，并且变量都有默认初始值
     *
     * 特殊：
     * 在java中，只有final修饰符，可以修饰局部变量
     * 其他都不能修饰局部变量
     *
     *
     * 变量的作用域和生命周期
     * 当一个变量被定义的时候，他的作用域就确定了
     *
     * 成员变量：整个类中有效
     * 局部变量：只在定义的{}中有效
     *
     * 变量的类型  变量存在的地方  生命周期开始  生命周期结束
     * --------------------------------------------
     * 类变量   类里，static修饰  字节码加载  字节码被卸载
     * 实例变量  类里，无static修饰  new对象   对象被销毁
     * 局部变量  方法里，形参     方法调用开始  方法调用结束
     *
     *局部变量的初始化和jvm的运行机制：
     *局部变量定义之后，必须显示初始化后才能使用，
     *因为系统不会因为局部变量执行初始化操作。
     * 定义局部变量后，系统并未为这个变量分配内存空间
     *直到程序为这个变量赋值的时候，系统才会为局部变量分配内存，并将初始值保存到该内存中
     *注意：局部变量不属于任何类或实例，因此他总是保存在其所在方法的栈内存中
     *
     * 基本数据类型局部变量
     * -直接把这个变量的值保存到该变量所对应的内存中
     * 引用数据类型局部变量
     * -这个变量的内存中存的是堆中唯一一块内存空间地址值
     * -通过该地址引用到该变量实际引用堆里的对象
     * 注意：栈内存中的变量无需系统垃圾回收，其往往随方法或代码块的运行结束而销毁，
     * 栈中的运行速度远远快于堆内存
     *
     * 面向对象的思想
     * 面向过程和面向对象
     * 面向对象的优势和特点
     *
     *
     * 类和对象
     * 类和对象的关系
     * 类的定义
     * 对象的基本操作
     *  对象的创建和使用
     *  对象的实例化过程
     *  对象的生命周期
     *  匿名对象
     *
     * 构造器
     *  构造器的特点
     *  默认构造器
     *  构造器的重载
     *
     * static修饰符
     *  类成员的特点
     *  类成员和实例成员的访问
     *  类成员的使用
     *  类字段在jvm中的存储
     *
     * 深入分析变量
     *  变量的分类和初始值
     *  变量的作用域和生命周期
     *  局部变量的初始化和在jvm中的运行机制
     *
     *
     */
}
